{
  "version": 3,
  "sources": ["src/app/auth/services/auth.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { catchError, map, Observable, throwError } from 'rxjs';\n\nimport { environment } from '@envs/environment';\nimport { AuthResponse, Login, Register } from '../interfaces/auth.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private readonly AUTH_URL = `${environment.API_URL}/auth`;\n\n  private httpClient = inject(HttpClient);\n\n  constructor() { }\n\n  public login(body: Login): Observable<AuthResponse> {\n    const url = `${this.AUTH_URL}/login`;\n    return this.httpClient.post<AuthResponse>(url, body);\n  }\n\n  public logout(): Observable<void> {\n    const url = `${this.AUTH_URL}/logout`;\n    return this.httpClient.post<void>(url, null);\n  }\n\n  public register(body: Register): Observable<boolean> {\n    const url = `${this.AUTH_URL}/register`;\n    return this.httpClient.post<void>(url, body).pipe(\n      map(() => true),\n      catchError((error: HttpErrorResponse) => throwError(() => error))\n    );\n  }\n\n  public refreshToken(): Observable<AuthResponse> {\n    const url = `${this.AUTH_URL}/refresh`;\n    return this.httpClient.post<AuthResponse>(url, null);\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAUM,IAAO,cAAP,MAAO,aAAW;EAEL,WAAW,GAAG,YAAY,OAAO;EAE1C,aAAa,OAAO,UAAU;EAEtC,cAAA;EAAgB;EAET,MAAM,MAAW;AACtB,UAAM,MAAM,GAAG,KAAK,QAAQ;AAC5B,WAAO,KAAK,WAAW,KAAmB,KAAK,IAAI;EACrD;EAEO,SAAM;AACX,UAAM,MAAM,GAAG,KAAK,QAAQ;AAC5B,WAAO,KAAK,WAAW,KAAW,KAAK,IAAI;EAC7C;EAEO,SAAS,MAAc;AAC5B,UAAM,MAAM,GAAG,KAAK,QAAQ;AAC5B,WAAO,KAAK,WAAW,KAAW,KAAK,IAAI,EAAE,KAC3C,IAAI,MAAM,IAAI,GACd,WAAW,CAAC,UAA6B,WAAW,MAAM,KAAK,CAAC,CAAC;EAErE;EAEO,eAAY;AACjB,UAAM,MAAM,GAAG,KAAK,QAAQ;AAC5B,WAAO,KAAK,WAAW,KAAmB,KAAK,IAAI;EACrD;;qCA7BW,cAAW;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;",
  "names": []
}
