{
  "version": 3,
  "sources": ["src/app/forms/components/text-input/text-input.component.ts", "src/app/forms/components/text-input/text-input.component.html"],
  "sourcesContent": ["import { Component, input } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgxMaskDirective } from 'ngx-mask';\n\nimport { InputType } from '../../interfaces/text-input.types';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'text-input',\n  imports: [\n    NgClass,\n    ReactiveFormsModule,\n    NgxMaskDirective,\n  ],\n  templateUrl: './text-input.component.html',\n  styles: ``,\n})\nexport class TextInputComponent {\n\n  public control = input.required<FormControl<string | number>>();\n  public legend = input.required<string>();\n  public type = input<InputType>('text');\n  public placeholder = input<string>();\n  public label = input<string>();\n  public mask = input<string>();\n  public dropCharacter = input<boolean>(true);\n  public min = input<number>(0);\n  public max = input<number>(0);\n  public step = input<number>(1);\n  public disabled = input<boolean>(false);\n\n  constructor() { }\n\n  get isInvalid(): boolean {\n    return this.control().invalid && (this.control().touched || this.control().dirty);\n  }\n\n}\n", "<fieldset class=\"fieldset\" [disabled]=\"disabled()\">\n  <legend class=\"fieldset-legend\" [ngClass]=\"{ 'text-error' : isInvalid }\">{{ legend() }}</legend>\n  <input [type]=\"type()\" class=\"input\"\n    [formControl]=\"control()\"\n    [placeholder]=\"placeholder()\"\n    [ngClass]=\"{ 'input-error' : isInvalid }\"\n    [mask]=\"mask()\"\n    [dropSpecialCharacters]=\"dropCharacter()\"\n    [min]=\"min()\"\n    [max]=\"max()\"\n    [step]=\"step()\"\n  />\n  @if (label() && isInvalid) {\n    <p class=\"fieldset-label text-error text-[8px]\">{{ label() }}</p>\n  }\n</fieldset>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaI,IAAA,yBAAA,GAAA,KAAA,CAAA;AAAgD,IAAA,iBAAA,CAAA;AAAa,IAAA,uBAAA;;;;AAAb,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,MAAA,CAAA;;;ADK9C,IAAO,qBAAP,MAAO,oBAAkB;EAEtB,UAAU,MAAM,SAAQ;EACxB,SAAS,MAAM,SAAQ;EACvB,OAAO,MAAiB,MAAM;EAC9B,cAAc,MAAK;EACnB,QAAQ,MAAK;EACb,OAAO,MAAK;EACZ,gBAAgB,MAAe,IAAI;EACnC,MAAM,MAAc,CAAC;EACrB,MAAM,MAAc,CAAC;EACrB,OAAO,MAAc,CAAC;EACtB,WAAW,MAAe,KAAK;EAEtC,cAAA;EAAgB;EAEhB,IAAI,YAAS;AACX,WAAO,KAAK,QAAO,EAAG,YAAY,KAAK,QAAO,EAAG,WAAW,KAAK,QAAO,EAAG;EAC7E;;qCAlBW,qBAAkB;EAAA;yEAAlB,qBAAkB,WAAA,CAAA,CAAA,YAAA,CAAA,GAAA,QAAA,EAAA,SAAA,CAAA,GAAA,SAAA,GAAA,QAAA,CAAA,GAAA,QAAA,GAAA,MAAA,CAAA,GAAA,MAAA,GAAA,aAAA,CAAA,GAAA,aAAA,GAAA,OAAA,CAAA,GAAA,OAAA,GAAA,MAAA,CAAA,GAAA,MAAA,GAAA,eAAA,CAAA,GAAA,eAAA,GAAA,KAAA,CAAA,GAAA,KAAA,GAAA,KAAA,CAAA,GAAA,KAAA,GAAA,MAAA,CAAA,GAAA,MAAA,GAAA,UAAA,CAAA,GAAA,UAAA,EAAA,GAAA,OAAA,GAAA,MAAA,IAAA,QAAA,CAAA,CAAA,GAAA,YAAA,GAAA,UAAA,GAAA,CAAA,GAAA,mBAAA,GAAA,SAAA,GAAA,CAAA,GAAA,SAAA,GAAA,QAAA,eAAA,eAAA,WAAA,QAAA,yBAAA,OAAA,OAAA,MAAA,GAAA,CAAA,GAAA,kBAAA,cAAA,YAAA,CAAA,GAAA,UAAA,SAAA,4BAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;AClB/B,MAAA,yBAAA,GAAA,YAAA,CAAA,EAAmD,GAAA,UAAA,CAAA;AACwB,MAAA,iBAAA,CAAA;AAAc,MAAA,uBAAA;AACvF,MAAA,oBAAA,GAAA,SAAA,CAAA;AAUA,MAAA,qBAAA,GAAA,2CAAA,GAAA,GAAA,KAAA,CAAA;AAGF,MAAA,uBAAA;;;AAf2B,MAAA,qBAAA,YAAA,IAAA,SAAA,CAAA;AACO,MAAA,oBAAA;AAAA,MAAA,qBAAA,WAAA,0BAAA,IAAA,KAAA,IAAA,SAAA,CAAA;AAAyC,MAAA,oBAAA;AAAA,MAAA,4BAAA,IAAA,OAAA,CAAA;AAClE,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,KAAA,CAAA,EAAe,eAAA,IAAA,QAAA,CAAA,EACK,eAAA,IAAA,YAAA,CAAA,EACI,WAAA,0BAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EACY,QAAA,IAAA,KAAA,CAAA,EAC1B,yBAAA,IAAA,cAAA,CAAA,EAC0B,OAAA,IAAA,IAAA,CAAA,EAC5B,OAAA,IAAA,IAAA,CAAA,EACA,QAAA,IAAA,KAAA,CAAA;AAGf,MAAA,oBAAA;AAAA,MAAA,wBAAA,IAAA,MAAA,KAAA,IAAA,YAAA,IAAA,EAAA;;;IDDE;IACA;IAAmB;IAAA;IAAA;IACnB;EAAgB,GAAA,eAAA,EAAA,CAAA;;;6EAKP,oBAAkB,EAAA,WAAA,sBAAA,UAAA,+DAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
