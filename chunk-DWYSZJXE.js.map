{
  "version": 3,
  "sources": ["src/app/auth/pages/reset-password-page/reset-password-page.component.ts", "src/app/auth/pages/reset-password-page/reset-password-page.component.html"],
  "sourcesContent": ["import { Component, computed, inject, signal } from '@angular/core';\nimport { NonNullableFormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { AlertService } from '../../../shared/services/alert.service';\nimport { RecoveryForm } from '../../interfaces/auth.interface';\nimport { passwordPattern } from '../../../forms/validators/patterns';\nimport { isFieldOneEqualsFieldTwo } from '../../../forms/validators/custom-validators';\nimport { TextInputComponent } from 'src/app/forms/components/text-input/text-input.component';\n\n@Component({\n  selector: 'auth-reset-password-page',\n  imports: [\n    ReactiveFormsModule,\n    TextInputComponent\n  ],\n  templateUrl: './reset-password-page.component.html',\n  styles: ``\n})\nexport default class ResetPasswordPageComponent {\n\n  private formBuilder = inject(NonNullableFormBuilder);\n  private alertService = inject(AlertService);\n\n  private _codeSent = signal<boolean>(false);\n\n  public codeSent = computed(() => this._codeSent());\n  public email = this.formBuilder.control('', [Validators.required]);\n  public resetForm = this.formBuilder.group<RecoveryForm>({\n    totp: this.formBuilder.control('', [Validators.required]),\n    password: this.formBuilder.control('', [Validators.required, Validators.pattern(passwordPattern)]),\n    confirmPassword: this.formBuilder.control('', [Validators.required])\n  }, {\n    validators: isFieldOneEqualsFieldTwo(\"password\", \"confirmPassword\")\n  });\n\n  constructor() { }\n\n  public sendCode(): void {\n    if (this.email.invalid) {\n      this.email.markAsTouched();\n      this.alertService.showAlert('El correo electronico es necesario para esta accion.', 'error');\n      return;\n    }\n    this._codeSent.set(true);\n  }\n\n  public onResetPassword(): void {\n    if (this.resetForm.invalid) {\n      this.resetForm.markAllAsTouched();\n      this.alertService.showAlert('Formulario invalido, porfavor llenalo correctamente.', 'error');\n      return;\n    }\n  }\n\n}\n", "<div class=\"flex flex-col\">\n  <span class=\"text-3xl font-bold text-center mt-3\">Renueva tu Contraseña</span>\n  @if (!codeSent()) {\n    <text-input class=\"mt-5\" [control]=\"email\" legend=\"Ingresa tu email\"\n      label=\"Este campo es obligatorio.\" type=\"text\" placeholder=\"nick@example.com\"\n    />\n    <button class=\"btn bg-yb mt-2 text-white w-full\" (click)=\"sendCode()\">\n      Enviar Codigo\n    </button>\n    <span class=\"text-center text-xs mt-5\">\n      Se te enviara un codigo a tu correo electronico para poder restablecer tu contraseña.\n    </span>\n  } @else {\n    <form class=\"grid grid-cols-7 gap-x-2 mt-5\" [formGroup]=\"resetForm\" (ngSubmit)=\"onResetPassword()\">\n      <text-input class=\"col-span-3\" [control]=\"resetForm.controls.password\" type=\"password\"\n        legend=\"Contraseña\" placeholder=\"••••••••\" label=\"Usa mayúsculas, minúsculas, números y símbolos.\"\n      />\n      <text-input class=\"col-span-4\" [control]=\"resetForm.controls.confirmPassword\" type=\"password\"\n        legend=\"Repite tu Contraseña\" placeholder=\"••••••••\" label=\"Las contraseñas no coinciden.\"\n      />\n      <text-input class=\"col-span-4 md:col-span-3\" [control]=\"resetForm.controls.totp\" legend=\"Ingresa el Codigo\"\n        label=\"Este campo es obligatorio.\" type=\"text\" placeholder=\"X X X X X X\" mask=\"0 0 0 0 0 0\"\n      />\n      <div class=\"col-span-3 md:col-span-4 h-[78px] flex items-end\">\n        <button class=\"btn bg-yb mb-1 w-full text-white\" type=\"submit\">\n          Restablecer\n        </button>\n      </div>\n    </form>\n  }\n</div>\n"],
  "mappings": "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",
  "names": []
}
