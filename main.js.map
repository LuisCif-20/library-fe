{
  "version": 3,
  "sources": ["src/app/auth/guards/public-routes.guard.ts", "src/app/app.routes.ts", "src/app/core/initializers/app-initializer.ts", "src/app/auth/interceptors/add-with-credentials.interceptor.ts", "src/app/auth/interceptors/add-access-token.interceptor.ts", "src/app/auth/interceptors/refresh-token.interceptor.ts", "src/app/app.config.ts", "src/app/shared/interfaces/alert.interface.ts", "src/app/shared/components/alert/alert.component.ts", "src/app/shared/components/alert/alert.component.html", "src/app/app.component.ts", "src/app/app.component.html", "src/main.ts"],
  "sourcesContent": ["import { inject } from '@angular/core';\nimport { CanMatchFn, Router } from '@angular/router';\n\nimport { AuthStore } from '../stores/auth.store';\nimport { AuthStatus } from '../interfaces/auth.store.interface';\n\nexport const publicRoutesGuard: CanMatchFn = (route, segments) => {\n  const authStore = inject(AuthStore);\n  if (authStore.authStatus() === AuthStatus.NOT_AUTHENTICATED) return true;\n  const router = inject(Router);\n  return router.createUrlTree(['/']);\n};\n", "import { Routes } from '@angular/router';\nimport { publicRoutesGuard } from './auth/guards/public-routes.guard';\n\nexport const routes: Routes = [\n  {\n    path: 'auth',\n    canMatch: [publicRoutesGuard],\n    loadChildren: () => import('./auth/auth.routes')\n  },\n  {\n    path: 'library',\n    loadChildren: () => import('./library/library.routes')\n  },\n  {\n    path: '404',\n    loadComponent: () => import('./shared/pages/error404-page/error404-page.component')\n  },\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'library'\n  },\n  {\n    path: '**',\n    redirectTo: '404'\n  }\n];\n", "import { inject } from \"@angular/core\";\nimport { forkJoin, map, Observable } from \"rxjs\";\nimport { AuthStore } from \"src/app/auth/stores/auth.store\";\nimport { ConfigurationService } from \"../services/configuration.service\";\n\nexport const combinedInitializer = (): Observable<boolean> => {\n  const configurationService = inject(ConfigurationService);\n  const authStore = inject(AuthStore);\n  return forkJoin([\n    configurationService.getConfiguration(),\n    authStore.checkAuth()\n  ]).pipe(\n    map(results => results.every(result => result === true))\n  );\n};\n", "import { HttpInterceptorFn } from '@angular/common/http';\n\nexport const addWithCredentialsInterceptor: HttpInterceptorFn = (req, next) => {\n  const clone = req.clone({\n    withCredentials: true\n  });\n  return next(clone);\n};\n", "import { HttpInterceptorFn } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { AuthStore } from '../stores/auth.store';\n\nexport const addAccessTokenInterceptor: HttpInterceptorFn = (req, next) => {\n  const authStore = inject(AuthStore);\n  const token = authStore.accessToken();\n  if (token) {\n    const clone = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n    return next(clone);\n  }\n  return next(req);\n};\n", "import { HttpErrorResponse, HttpInterceptorFn } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { AuthStore } from '../stores/auth.store';\nimport { catchError, switchMap, throwError } from 'rxjs';\n\nexport const refreshTokenInterceptor: HttpInterceptorFn = (req, next) => {\n  const authStore = inject(AuthStore);\n  return next(req).pipe(\n    catchError((error: HttpErrorResponse) => {\n      if (error.status === 401 && authStore.accessToken()) {\n        return authStore.refreshToken().pipe(\n          switchMap(() => {\n            const newReq = req.clone();\n            return next(newReq);\n          })\n        );\n      }\n      return throwError(() => error);\n    })\n  );\n};\n", "import { ApplicationConfig, provideAppInitializer, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { provideEnvironmentNgxMask } from 'ngx-mask';\n\n\nimport { routes } from './app.routes';\nimport { provideHttpClient, withFetch, withInterceptors } from '@angular/common/http';\nimport { combinedInitializer } from './core/initializers/app-initializer';\nimport { addWithCredentialsInterceptor } from './auth/interceptors/add-with-credentials.interceptor';\nimport { addAccessTokenInterceptor } from './auth/interceptors/add-access-token.interceptor';\nimport { refreshTokenInterceptor } from './auth/interceptors/refresh-token.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideZoneChangeDetection(\n      {\n        eventCoalescing: true\n      }\n    ),\n    provideRouter(routes),\n    provideEnvironmentNgxMask(),\n    provideHttpClient(\n      withFetch(),\n      withInterceptors([\n        addWithCredentialsInterceptor,\n        addAccessTokenInterceptor,\n        refreshTokenInterceptor\n      ])\n    ),\n    provideAppInitializer(combinedInitializer)\n  ]\n};\n", "export const ALERT_VARIANTS = {\n  info:     'alert-info',\n  error:    'alert-error',\n  success:  'alert-success',\n  warning:  'alert-warning'\n} as const;\n\nexport type AlertVariant = 'info' | 'error' | 'success' | 'warning';\n\nexport interface Alert {\n  type:     AlertVariant;\n  message:  string;\n  icon:     string;\n}\n", "import { Component, computed, inject } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\nimport { AlertService } from '../../services/alert.service';\nimport { ALERT_VARIANTS } from '../../interfaces/alert.interface';\n\n@Component({\n  selector: 'app-alert',\n  imports: [\n    NgClass\n  ],\n  templateUrl: './alert.component.html',\n  styles: ``\n})\nexport class AlertComponent {\n\n  private alertService = inject(AlertService);\n\n  public alert = computed(() => this.alertService.alert());\n\n  public alertClass = computed(() => ALERT_VARIANTS[this.alert()!.type]);\n\n\n}\n", "@if (alert()) {\n  <div class=\"fixed bottom-10 left-1/2 transform -translate-x-1/2 z-25 animate-fade-up animate-duration-700\">\n    <div role=\"alert\" class=\"alert alert-soft\" [ngClass]=\"alertClass()\">\n      <span class=\"material-icons\">{{ alert()!.icon }}</span>\n      <span>{{ alert()!.message }}</span>\n    </div>\n  </div>\n}\n", "import { Component, inject, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\nimport { ThemeService } from './theme/services/theme.service';\nimport { AlertComponent } from \"./shared/components/alert/alert.component\";\n\n@Component({\n  selector: 'app-root',\n  imports: [\n    RouterOutlet,\n    AlertComponent\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent implements OnInit {\n\n  private themeService = inject(ThemeService);\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.themeService.loadUserTheme();\n  }\n\n}\n", "<app-alert />\n<div class=\"h-screen w-screen\">\n  <router-outlet />\n</div>\n", "import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n"],
  "mappings": "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",
  "names": []
}
