{
  "version": 3,
  "sources": ["src/app/library/services/book.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { environment } from '@envs/environment';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { Book, BookResponse, CreateBook, UpdateBook } from '../interfaces/book.interface';\nimport { Filters } from '../interfaces/books.store.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  private readonly BOOK_URL = `${environment.API_URL}/books`\n\n  private httpClient = inject(HttpClient);\n\n  constructor() { }\n\n  public getBooks(filters: Filters): Observable<BookResponse> {\n    let params = new HttpParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        Array.isArray(value)\n        ? params = params.set(key, value.join(','))\n        : params = params.set(key, value.toString());\n      }\n    })\n    return this.httpClient.get<BookResponse>(this.BOOK_URL, { params });\n  }\n\n  public getBookById(id: string): Observable<Book> {\n    const url = `${this.BOOK_URL}/${id}`;\n    return this.httpClient.get<Book>(url);\n  }\n\n  public createBook(body: CreateBook): Observable<void> {\n    const formData = new FormData();\n    Object.keys(body).forEach((key) => {\n      const value = body[key as keyof CreateBook];\n      value instanceof Blob && value\n        ? formData.append(key, value)\n        : formData.append(key, value!.toString());\n    });\n    return this.httpClient.post<void>(this.BOOK_URL, formData).pipe(\n      catchError((error: HttpErrorResponse) => throwError(() => error))\n    );\n  }\n\n  public updateBook(id: string, body: UpdateBook): Observable<void> {\n    const formData = new FormData();\n    Object.keys(body).forEach((key) => {\n      const value = body[key as keyof UpdateBook];\n      if (value) {\n        value instanceof Blob\n        ? formData.append(key, value)\n        : formData.append(key, value!.toString());\n      }\n    });\n    const url = `${this.BOOK_URL}/${id}`;\n    return this.httpClient.put<void>(url, formData).pipe(\n      catchError((error: HttpErrorResponse) => throwError(() => error))\n    );\n  }\n\n  public deleteBook(id: string): Observable<void> {\n    const url = `${this.BOOK_URL}/${id}`;\n    return this.httpClient.delete<void>(url).pipe(\n      catchError((error: HttpErrorResponse) => throwError(() => error))\n    );\n  }\n\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAUM,IAAO,cAAP,MAAO,aAAW;EAEL,WAAW,GAAG,YAAY,OAAO;EAE1C,aAAa,OAAO,UAAU;EAEtC,cAAA;EAAgB;EAET,SAAS,SAAgB;AAC9B,QAAI,SAAS,IAAI,WAAU;AAC3B,WAAO,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAK;AAC/C,UAAI,UAAU,QAAQ,UAAU,UAAa,UAAU,IAAI;AACzD,cAAM,QAAQ,KAAK,IACjB,SAAS,OAAO,IAAI,KAAK,MAAM,KAAK,GAAG,CAAC,IACxC,SAAS,OAAO,IAAI,KAAK,MAAM,SAAQ,CAAE;MAC7C;IACF,CAAC;AACD,WAAO,KAAK,WAAW,IAAkB,KAAK,UAAU,EAAE,OAAM,CAAE;EACpE;EAEO,YAAY,IAAU;AAC3B,UAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,EAAE;AAClC,WAAO,KAAK,WAAW,IAAU,GAAG;EACtC;EAEO,WAAW,MAAgB;AAChC,UAAM,WAAW,IAAI,SAAQ;AAC7B,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,QAAO;AAChC,YAAM,QAAQ,KAAK,GAAuB;AAC1C,uBAAiB,QAAQ,QACrB,SAAS,OAAO,KAAK,KAAK,IAC1B,SAAS,OAAO,KAAK,MAAO,SAAQ,CAAE;IAC5C,CAAC;AACD,WAAO,KAAK,WAAW,KAAW,KAAK,UAAU,QAAQ,EAAE,KACzD,WAAW,CAAC,UAA6B,WAAW,MAAM,KAAK,CAAC,CAAC;EAErE;EAEO,WAAW,IAAY,MAAgB;AAC5C,UAAM,WAAW,IAAI,SAAQ;AAC7B,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,QAAO;AAChC,YAAM,QAAQ,KAAK,GAAuB;AAC1C,UAAI,OAAO;AACT,yBAAiB,OACf,SAAS,OAAO,KAAK,KAAK,IAC1B,SAAS,OAAO,KAAK,MAAO,SAAQ,CAAE;MAC1C;IACF,CAAC;AACD,UAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,EAAE;AAClC,WAAO,KAAK,WAAW,IAAU,KAAK,QAAQ,EAAE,KAC9C,WAAW,CAAC,UAA6B,WAAW,MAAM,KAAK,CAAC,CAAC;EAErE;EAEO,WAAW,IAAU;AAC1B,UAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,EAAE;AAClC,WAAO,KAAK,WAAW,OAAa,GAAG,EAAE,KACvC,WAAW,CAAC,UAA6B,WAAW,MAAM,KAAK,CAAC,CAAC;EAErE;;qCA3DW,cAAW;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;",
  "names": []
}
